{
  "_args": [
    [
      {
        "raw": "queue@^3.1.0",
        "scope": null,
        "escapedName": "queue",
        "name": "queue",
        "rawSpec": "^3.1.0",
        "spec": ">=3.1.0 <4.0.0",
        "type": "range"
      },
      "/home/ashutosh/Projects/MyHealth/node_modules/gulp-symdest"
    ]
  ],
  "_from": "queue@>=3.1.0 <4.0.0",
  "_id": "queue@3.1.0",
  "_inCache": true,
  "_location": "/queue",
  "_nodeVersion": "1.4.2",
  "_npmUser": {
    "name": "jessetane",
    "email": "jesse.tane@gmail.com"
  },
  "_npmVersion": "2.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "queue@^3.1.0",
    "scope": null,
    "escapedName": "queue",
    "name": "queue",
    "rawSpec": "^3.1.0",
    "spec": ">=3.1.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gulp-symdest",
    "/gulp-vinyl-zip"
  ],
  "_resolved": "https://registry.npmjs.org/queue/-/queue-3.1.0.tgz",
  "_shasum": "6c49d01f009e2256788789f2bffac6b8b9990585",
  "_shrinkwrap": null,
  "_spec": "queue@^3.1.0",
  "_where": "/home/ashutosh/Projects/MyHealth/node_modules/gulp-symdest",
  "author": {
    "name": "Jesse Tane",
    "email": "jesse.tane@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jessetane/queue/issues"
  },
  "dependencies": {
    "inherits": "~2.0.0"
  },
  "description": "asynchronous function queue with adjustable concurrency",
  "devDependencies": {
    "browserify": "^5.9.1",
    "coveralls": "^2.11.2",
    "istanbul": "^0.3.2",
    "tape": "^2.14.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6c49d01f009e2256788789f2bffac6b8b9990585",
    "tarball": "https://registry.npmjs.org/queue/-/queue-3.1.0.tgz"
  },
  "gitHead": "8cb17ba3292dc0cfcd104f4d7531f887fae7cf30",
  "homepage": "https://github.com/jessetane/queue#readme",
  "keywords": [
    "queue",
    "async",
    "asynchronous",
    "synchronous",
    "job",
    "task",
    "concurrency",
    "concurrent"
  ],
  "license": "WTFPL",
  "maintainers": [
    {
      "name": "jessetane",
      "email": "jesse.tane@gmail.com"
    }
  ],
  "name": "queue",
  "optionalDependencies": {},
  "readme": "```\n   ____  __  _____  __  _____ \n  / __ `/ / / / _ \\/ / / / _ \\\n / /_/ / /_/ /  __/ /_/ /  __/\n \\__, /\\__,_/\\___/\\__,_/\\___/ \n   /_/                        \n```\nAsynchronous function queue with adjustable concurrency.\n\n[![npm](http://img.shields.io/npm/v/queue.svg?style=flat-square)](http://www.npmjs.org/queue)\n[![tests](https://img.shields.io/travis/jessetane/queue.svg?style=flat-square&branch=master)](https://travis-ci.org/jessetane/queue)\n[![coverage](https://img.shields.io/coveralls/jessetane/queue.svg?style=flat-square&branch=master)](https://coveralls.io/r/jessetane/queue)\n\n## Why\n[Async](https://github.com/caolan/async) is a big library offering various approaches to dealing with asynchrony; `queue` is a small library offering a single, flexible abstraction.\n\n## How\nThis module exports a class `Queue` that implements most of the `Array` API. Pass async functions (ones that accept a callback) to an instance's additive array methods. Processing begins when you call `q.start()`.\n\n## Install\n`npm install queue`  \n\n## Test\n`npm test`  \n`npm run test-browser`\n\n## Example\n`npm run example`\n``` javascript\nvar queue = require('queue');\n\nvar q = queue();\nvar results = [];\n\n// add jobs using the Array API\n\nq.push(function(cb) {\n  results.push('two');\n  cb();\n});\n\nq.push(\n  function(cb) {\n    results.push('four');\n    cb();\n  },\n  function(cb) {\n    results.push('five');\n    cb();\n  }\n);\n\nq.unshift(function(cb) {\n  results.push('one');\n  cb();\n});\n\nq.splice(2, 0, function(cb) {\n  results.push('three');\n  cb();\n});\n\n// use the timeout feature to deal with jobs that \n// take too long or forget to execute a callback\n\nq.timeout = 100;\n\nq.on('timeout', function(next, job) {\n  console.log('job timed out:', job.toString().replace(/\\n/g, ''));\n  next();\n});\n\nq.push(function(cb) {\n  setTimeout(function() {\n    console.log('slow job finished');\n    cb();\n  }, 200);\n});\n\nq.push(function(cb) {\n  console.log('forgot to execute callback');\n});\n\n// get notified when jobs complete\n\nq.on('success', function(result, job) {\n  console.log('job finished processing:', job.toString().replace(/\\n/g, ''));\n});\n\n// begin processing, get notified on end / failure\n\nq.start(function(err) {\n  console.log('all done:', results);\n});\n```\n\n## Require\n#### `var queue = require('queue')`\n\n## Constructor\n#### `var q = queue([opts])`\nWhere `opts` may contain inital values for:\n* `q.concurrency`\n* `q.timeout`\n\n## Instance methods\n#### `q.start([cb])`\ncb, if passed, will be called when the queue empties or when an error occurs.\n\n#### `q.stop()`\nStops the queue. can be resumed with `q.start()`.\n\n#### `q.end([err])`\nStop and empty the queue immediately.\n\n## Instance methods mixed in from `Array`\nMozilla has docs on how these methods work [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array).\n#### `q.push(element1, ..., elementN)`  \n#### `q.unshift(element1, ..., elementN)`  \n#### `q.splice(index , howMany[, element1[, ...[, elementN]]])`  \n#### `q.pop()`  \n#### `q.shift()`  \n#### `q.slice(begin[, end])`  \n#### `q.reverse()`  \n#### `q.indexOf(searchElement[, fromIndex])`  \n#### `q.lastIndexOf(searchElement[, fromIndex])`  \n\n## Properties\n#### `q.concurrency`\nMax number of jobs the queue should process concurrently, defaults to `Infinity`.\n\n#### `q.timeout`\nMilliseconds to wait for a job to execute its callback.\n\n#### `q.length`\nJobs pending + jobs to process (readonly).\n\n## Events\n\n#### `q.emit('success', result, job)`\nAfter a job executes its callback.\n\n#### `q.emit('error', err, job)`\nAfter a job passes an error to its callback.\n\n#### `q.emit('timeout', continue, job)`\nAfter `q.timeout` milliseconds have elapsed and a job has not executed its callback.\n\n#### `q.emit('end'[, err])`\nAfter all jobs have been processed\n\n## Releases\nThe latest stable release is published to [npm](http://npmjs.org/queue). Abbreviated changelog below:\n* [3.1.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n * Add .npmignore\n* [3.0.x](https://github.com/jessetane/queue/archive/3.0.6.tar.gz)\n * Change the default concurrency to `Infinity`\n * Allow `q.start()` to accept an optional callback executed on `q.emit('end')`\n* [2.x](https://github.com/jessetane/queue/archive/2.2.0.tar.gz)\n * Major api changes / not backwards compatible with 1.x\n* [1.x](https://github.com/jessetane/queue/archive/1.0.2.tar.gz)\n * Early prototype\n\n## License\nCopyright Â© 2014 Jesse Tane <jesse.tane@gmail.com>\n\nThis work is free. You can redistribute it and/or modify it under the\nterms of the [WTFPL](http://www.wtfpl.net/txt/copying).\n\nNo Warranty. The Software is provided \"as is\" without warranty of any kind, either express or implied, including without limitation any implied warranties of condition, uninterrupted use, merchantability, fitness for a particular purpose, or non-infringement.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jessetane/queue.git"
  },
  "scripts": {
    "example": "node example",
    "test": "node test",
    "test-browser": "browserify test/index.js > test/bundle.js && echo \"open test/index.html in your browser\"",
    "travis": "istanbul cover test --report lcovonly && cat coverage/lcov.info | coveralls"
  },
  "version": "3.1.0"
}
